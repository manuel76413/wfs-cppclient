/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef wfs_TYPES_H
#define wfs_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>




class WfsError;

class WfsAck;

class WfsReq;

class WfsAuth;

class WfsData;

class WfsFile;

class DirItem;

class DirList;

typedef struct _WfsError__isset {
  _WfsError__isset() : code(false), info(false) {}
  bool code :1;
  bool info :1;
} _WfsError__isset;

class WfsError : public virtual ::apache::thrift::TBase {
 public:

  WfsError(const WfsError&);
  WfsError& operator=(const WfsError&);
  WfsError() noexcept
           : code(0),
             info() {
  }

  virtual ~WfsError() noexcept;
  int32_t code;
  std::string info;

  _WfsError__isset __isset;

  void __set_code(const int32_t val);

  void __set_info(const std::string& val);

  bool operator == (const WfsError & rhs) const
  {
    if (__isset.code != rhs.__isset.code)
      return false;
    else if (__isset.code && !(code == rhs.code))
      return false;
    if (__isset.info != rhs.__isset.info)
      return false;
    else if (__isset.info && !(info == rhs.info))
      return false;
    return true;
  }
  bool operator != (const WfsError &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WfsError & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(WfsError &a, WfsError &b);

std::ostream& operator<<(std::ostream& out, const WfsError& obj);

typedef struct _WfsAck__isset {
  _WfsAck__isset() : error(false) {}
  bool error :1;
} _WfsAck__isset;

class WfsAck : public virtual ::apache::thrift::TBase {
 public:

  WfsAck(const WfsAck&);
  WfsAck& operator=(const WfsAck&);
  WfsAck() noexcept
         : ok(0) {
  }

  virtual ~WfsAck() noexcept;
  bool ok;
  WfsError error;

  _WfsAck__isset __isset;

  void __set_ok(const bool val);

  void __set_error(const WfsError& val);

  bool operator == (const WfsAck & rhs) const
  {
    if (!(ok == rhs.ok))
      return false;
    if (__isset.error != rhs.__isset.error)
      return false;
    else if (__isset.error && !(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const WfsAck &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WfsAck & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(WfsAck &a, WfsAck &b);

std::ostream& operator<<(std::ostream& out, const WfsAck& obj);

typedef struct _WfsReq__isset {
  _WfsReq__isset() : path(false) {}
  bool path :1;
} _WfsReq__isset;

class WfsReq : public virtual ::apache::thrift::TBase {
 public:

  WfsReq(const WfsReq&);
  WfsReq& operator=(const WfsReq&);
  WfsReq() noexcept
         : path() {
  }

  virtual ~WfsReq() noexcept;
  std::string path;

  _WfsReq__isset __isset;

  void __set_path(const std::string& val);

  bool operator == (const WfsReq & rhs) const
  {
    if (__isset.path != rhs.__isset.path)
      return false;
    else if (__isset.path && !(path == rhs.path))
      return false;
    return true;
  }
  bool operator != (const WfsReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WfsReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(WfsReq &a, WfsReq &b);

std::ostream& operator<<(std::ostream& out, const WfsReq& obj);

typedef struct _WfsAuth__isset {
  _WfsAuth__isset() : name(false), pwd(false) {}
  bool name :1;
  bool pwd :1;
} _WfsAuth__isset;

class WfsAuth : public virtual ::apache::thrift::TBase {
 public:

  WfsAuth(const WfsAuth&);
  WfsAuth& operator=(const WfsAuth&);
  WfsAuth() noexcept
          : name(),
            pwd() {
  }

  virtual ~WfsAuth() noexcept;
  std::string name;
  std::string pwd;

  _WfsAuth__isset __isset;

  void __set_name(const std::string& val);

  void __set_pwd(const std::string& val);

  bool operator == (const WfsAuth & rhs) const
  {
    if (__isset.name != rhs.__isset.name)
      return false;
    else if (__isset.name && !(name == rhs.name))
      return false;
    if (__isset.pwd != rhs.__isset.pwd)
      return false;
    else if (__isset.pwd && !(pwd == rhs.pwd))
      return false;
    return true;
  }
  bool operator != (const WfsAuth &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WfsAuth & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(WfsAuth &a, WfsAuth &b);

std::ostream& operator<<(std::ostream& out, const WfsAuth& obj);

typedef struct _WfsData__isset {
  _WfsData__isset() : data(false) {}
  bool data :1;
} _WfsData__isset;

class WfsData : public virtual ::apache::thrift::TBase {
 public:

  WfsData(const WfsData&);
  WfsData& operator=(const WfsData&);
  WfsData() noexcept
          : data() {
  }

  virtual ~WfsData() noexcept;
  std::string data;

  _WfsData__isset __isset;

  void __set_data(const std::string& val);

  bool operator == (const WfsData & rhs) const
  {
    if (__isset.data != rhs.__isset.data)
      return false;
    else if (__isset.data && !(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const WfsData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WfsData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(WfsData &a, WfsData &b);

std::ostream& operator<<(std::ostream& out, const WfsData& obj);

typedef struct _WfsFile__isset {
  _WfsFile__isset() : compress(false) {}
  bool compress :1;
} _WfsFile__isset;

class WfsFile : public virtual ::apache::thrift::TBase {
 public:

  WfsFile(const WfsFile&);
  WfsFile& operator=(const WfsFile&);
  WfsFile() noexcept
          : data(),
            name(),
            compress(0) {
  }

  virtual ~WfsFile() noexcept;
  std::string data;
  std::string name;
  int8_t compress;

  _WfsFile__isset __isset;

  void __set_data(const std::string& val);

  void __set_name(const std::string& val);

  void __set_compress(const int8_t val);

  bool operator == (const WfsFile & rhs) const
  {
    if (!(data == rhs.data))
      return false;
    if (!(name == rhs.name))
      return false;
    if (__isset.compress != rhs.__isset.compress)
      return false;
    else if (__isset.compress && !(compress == rhs.compress))
      return false;
    return true;
  }
  bool operator != (const WfsFile &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WfsFile & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(WfsFile &a, WfsFile &b);

std::ostream& operator<<(std::ostream& out, const WfsFile& obj);


class DirItem : public virtual ::apache::thrift::TBase {
 public:

  DirItem(const DirItem&);
  DirItem& operator=(const DirItem&);
  DirItem() noexcept
          : name(),
            size(0),
            mtime(0),
            isDir(0) {
  }

  virtual ~DirItem() noexcept;
  std::string name;
  int64_t size;
  int64_t mtime;
  bool isDir;

  void __set_name(const std::string& val);

  void __set_size(const int64_t val);

  void __set_mtime(const int64_t val);

  void __set_isDir(const bool val);

  bool operator == (const DirItem & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(size == rhs.size))
      return false;
    if (!(mtime == rhs.mtime))
      return false;
    if (!(isDir == rhs.isDir))
      return false;
    return true;
  }
  bool operator != (const DirItem &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DirItem & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(DirItem &a, DirItem &b);

std::ostream& operator<<(std::ostream& out, const DirItem& obj);

typedef struct _DirList__isset {
  _DirList__isset() : items(false), error(false) {}
  bool items :1;
  bool error :1;
} _DirList__isset;

class DirList : public virtual ::apache::thrift::TBase {
 public:

  DirList(const DirList&);
  DirList& operator=(const DirList&);
  DirList() noexcept
          : path() {
  }

  virtual ~DirList() noexcept;
  std::string path;
  std::vector<DirItem>  items;
  WfsError error;

  _DirList__isset __isset;

  void __set_path(const std::string& val);

  void __set_items(const std::vector<DirItem> & val);

  void __set_error(const WfsError& val);

  bool operator == (const DirList & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    if (__isset.items != rhs.__isset.items)
      return false;
    else if (__isset.items && !(items == rhs.items))
      return false;
    if (__isset.error != rhs.__isset.error)
      return false;
    else if (__isset.error && !(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const DirList &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DirList & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(DirList &a, DirList &b);

std::ostream& operator<<(std::ostream& out, const DirList& obj);



#endif
