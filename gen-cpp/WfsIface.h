/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef WfsIface_H
#define WfsIface_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "wfs_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class WfsIfaceIf {
 public:
  virtual ~WfsIfaceIf() {}
  virtual void Append(WfsAck& _return, const WfsFile& file) = 0;
  virtual void Delete(WfsAck& _return, const std::string& path) = 0;
  virtual void Rename(WfsAck& _return, const std::string& path, const std::string& newpath) = 0;
  virtual void Auth(WfsAck& _return, const WfsAuth& wa) = 0;
  virtual void Get(WfsData& _return, const std::string& path) = 0;
  virtual void List(DirList& _return, const std::string& path) = 0;
  virtual int8_t Ping() = 0;
};

class WfsIfaceIfFactory {
 public:
  typedef WfsIfaceIf Handler;

  virtual ~WfsIfaceIfFactory() {}

  virtual WfsIfaceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(WfsIfaceIf* /* handler */) = 0;
  };

class WfsIfaceIfSingletonFactory : virtual public WfsIfaceIfFactory {
 public:
  WfsIfaceIfSingletonFactory(const ::std::shared_ptr<WfsIfaceIf>& iface) : iface_(iface) {}
  virtual ~WfsIfaceIfSingletonFactory() {}

  virtual WfsIfaceIf* getHandler(const ::apache::thrift::TConnectionInfo&) override {
    return iface_.get();
  }
  virtual void releaseHandler(WfsIfaceIf* /* handler */) override {}

 protected:
  ::std::shared_ptr<WfsIfaceIf> iface_;
};

class WfsIfaceNull : virtual public WfsIfaceIf {
 public:
  virtual ~WfsIfaceNull() {}
  void Append(WfsAck& /* _return */, const WfsFile& /* file */) override {
    return;
  }
  void Delete(WfsAck& /* _return */, const std::string& /* path */) override {
    return;
  }
  void Rename(WfsAck& /* _return */, const std::string& /* path */, const std::string& /* newpath */) override {
    return;
  }
  void Auth(WfsAck& /* _return */, const WfsAuth& /* wa */) override {
    return;
  }
  void Get(WfsData& /* _return */, const std::string& /* path */) override {
    return;
  }
  void List(DirList& /* _return */, const std::string& /* path */) override {
    return;
  }
  int8_t Ping() override {
    int8_t _return = 0;
    return _return;
  }
};

typedef struct _WfsIface_Append_args__isset {
  _WfsIface_Append_args__isset() : file(false) {}
  bool file :1;
} _WfsIface_Append_args__isset;

class WfsIface_Append_args {
 public:

  WfsIface_Append_args(const WfsIface_Append_args&);
  WfsIface_Append_args& operator=(const WfsIface_Append_args&);
  WfsIface_Append_args() noexcept {
  }

  virtual ~WfsIface_Append_args() noexcept;
  WfsFile file;

  _WfsIface_Append_args__isset __isset;

  void __set_file(const WfsFile& val);

  bool operator == (const WfsIface_Append_args & rhs) const
  {
    if (!(file == rhs.file))
      return false;
    return true;
  }
  bool operator != (const WfsIface_Append_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WfsIface_Append_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class WfsIface_Append_pargs {
 public:


  virtual ~WfsIface_Append_pargs() noexcept;
  const WfsFile* file;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _WfsIface_Append_result__isset {
  _WfsIface_Append_result__isset() : success(false) {}
  bool success :1;
} _WfsIface_Append_result__isset;

class WfsIface_Append_result {
 public:

  WfsIface_Append_result(const WfsIface_Append_result&);
  WfsIface_Append_result& operator=(const WfsIface_Append_result&);
  WfsIface_Append_result() noexcept {
  }

  virtual ~WfsIface_Append_result() noexcept;
  WfsAck success;

  _WfsIface_Append_result__isset __isset;

  void __set_success(const WfsAck& val);

  bool operator == (const WfsIface_Append_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const WfsIface_Append_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WfsIface_Append_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _WfsIface_Append_presult__isset {
  _WfsIface_Append_presult__isset() : success(false) {}
  bool success :1;
} _WfsIface_Append_presult__isset;

class WfsIface_Append_presult {
 public:


  virtual ~WfsIface_Append_presult() noexcept;
  WfsAck* success;

  _WfsIface_Append_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _WfsIface_Delete_args__isset {
  _WfsIface_Delete_args__isset() : path(false) {}
  bool path :1;
} _WfsIface_Delete_args__isset;

class WfsIface_Delete_args {
 public:

  WfsIface_Delete_args(const WfsIface_Delete_args&);
  WfsIface_Delete_args& operator=(const WfsIface_Delete_args&);
  WfsIface_Delete_args() noexcept
                       : path() {
  }

  virtual ~WfsIface_Delete_args() noexcept;
  std::string path;

  _WfsIface_Delete_args__isset __isset;

  void __set_path(const std::string& val);

  bool operator == (const WfsIface_Delete_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    return true;
  }
  bool operator != (const WfsIface_Delete_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WfsIface_Delete_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class WfsIface_Delete_pargs {
 public:


  virtual ~WfsIface_Delete_pargs() noexcept;
  const std::string* path;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _WfsIface_Delete_result__isset {
  _WfsIface_Delete_result__isset() : success(false) {}
  bool success :1;
} _WfsIface_Delete_result__isset;

class WfsIface_Delete_result {
 public:

  WfsIface_Delete_result(const WfsIface_Delete_result&);
  WfsIface_Delete_result& operator=(const WfsIface_Delete_result&);
  WfsIface_Delete_result() noexcept {
  }

  virtual ~WfsIface_Delete_result() noexcept;
  WfsAck success;

  _WfsIface_Delete_result__isset __isset;

  void __set_success(const WfsAck& val);

  bool operator == (const WfsIface_Delete_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const WfsIface_Delete_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WfsIface_Delete_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _WfsIface_Delete_presult__isset {
  _WfsIface_Delete_presult__isset() : success(false) {}
  bool success :1;
} _WfsIface_Delete_presult__isset;

class WfsIface_Delete_presult {
 public:


  virtual ~WfsIface_Delete_presult() noexcept;
  WfsAck* success;

  _WfsIface_Delete_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _WfsIface_Rename_args__isset {
  _WfsIface_Rename_args__isset() : path(false), newpath(false) {}
  bool path :1;
  bool newpath :1;
} _WfsIface_Rename_args__isset;

class WfsIface_Rename_args {
 public:

  WfsIface_Rename_args(const WfsIface_Rename_args&);
  WfsIface_Rename_args& operator=(const WfsIface_Rename_args&);
  WfsIface_Rename_args() noexcept
                       : path(),
                         newpath() {
  }

  virtual ~WfsIface_Rename_args() noexcept;
  std::string path;
  std::string newpath;

  _WfsIface_Rename_args__isset __isset;

  void __set_path(const std::string& val);

  void __set_newpath(const std::string& val);

  bool operator == (const WfsIface_Rename_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    if (!(newpath == rhs.newpath))
      return false;
    return true;
  }
  bool operator != (const WfsIface_Rename_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WfsIface_Rename_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class WfsIface_Rename_pargs {
 public:


  virtual ~WfsIface_Rename_pargs() noexcept;
  const std::string* path;
  const std::string* newpath;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _WfsIface_Rename_result__isset {
  _WfsIface_Rename_result__isset() : success(false) {}
  bool success :1;
} _WfsIface_Rename_result__isset;

class WfsIface_Rename_result {
 public:

  WfsIface_Rename_result(const WfsIface_Rename_result&);
  WfsIface_Rename_result& operator=(const WfsIface_Rename_result&);
  WfsIface_Rename_result() noexcept {
  }

  virtual ~WfsIface_Rename_result() noexcept;
  WfsAck success;

  _WfsIface_Rename_result__isset __isset;

  void __set_success(const WfsAck& val);

  bool operator == (const WfsIface_Rename_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const WfsIface_Rename_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WfsIface_Rename_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _WfsIface_Rename_presult__isset {
  _WfsIface_Rename_presult__isset() : success(false) {}
  bool success :1;
} _WfsIface_Rename_presult__isset;

class WfsIface_Rename_presult {
 public:


  virtual ~WfsIface_Rename_presult() noexcept;
  WfsAck* success;

  _WfsIface_Rename_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _WfsIface_Auth_args__isset {
  _WfsIface_Auth_args__isset() : wa(false) {}
  bool wa :1;
} _WfsIface_Auth_args__isset;

class WfsIface_Auth_args {
 public:

  WfsIface_Auth_args(const WfsIface_Auth_args&);
  WfsIface_Auth_args& operator=(const WfsIface_Auth_args&);
  WfsIface_Auth_args() noexcept {
  }

  virtual ~WfsIface_Auth_args() noexcept;
  WfsAuth wa;

  _WfsIface_Auth_args__isset __isset;

  void __set_wa(const WfsAuth& val);

  bool operator == (const WfsIface_Auth_args & rhs) const
  {
    if (!(wa == rhs.wa))
      return false;
    return true;
  }
  bool operator != (const WfsIface_Auth_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WfsIface_Auth_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class WfsIface_Auth_pargs {
 public:


  virtual ~WfsIface_Auth_pargs() noexcept;
  const WfsAuth* wa;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _WfsIface_Auth_result__isset {
  _WfsIface_Auth_result__isset() : success(false) {}
  bool success :1;
} _WfsIface_Auth_result__isset;

class WfsIface_Auth_result {
 public:

  WfsIface_Auth_result(const WfsIface_Auth_result&);
  WfsIface_Auth_result& operator=(const WfsIface_Auth_result&);
  WfsIface_Auth_result() noexcept {
  }

  virtual ~WfsIface_Auth_result() noexcept;
  WfsAck success;

  _WfsIface_Auth_result__isset __isset;

  void __set_success(const WfsAck& val);

  bool operator == (const WfsIface_Auth_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const WfsIface_Auth_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WfsIface_Auth_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _WfsIface_Auth_presult__isset {
  _WfsIface_Auth_presult__isset() : success(false) {}
  bool success :1;
} _WfsIface_Auth_presult__isset;

class WfsIface_Auth_presult {
 public:


  virtual ~WfsIface_Auth_presult() noexcept;
  WfsAck* success;

  _WfsIface_Auth_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _WfsIface_Get_args__isset {
  _WfsIface_Get_args__isset() : path(false) {}
  bool path :1;
} _WfsIface_Get_args__isset;

class WfsIface_Get_args {
 public:

  WfsIface_Get_args(const WfsIface_Get_args&);
  WfsIface_Get_args& operator=(const WfsIface_Get_args&);
  WfsIface_Get_args() noexcept
                    : path() {
  }

  virtual ~WfsIface_Get_args() noexcept;
  std::string path;

  _WfsIface_Get_args__isset __isset;

  void __set_path(const std::string& val);

  bool operator == (const WfsIface_Get_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    return true;
  }
  bool operator != (const WfsIface_Get_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WfsIface_Get_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class WfsIface_Get_pargs {
 public:


  virtual ~WfsIface_Get_pargs() noexcept;
  const std::string* path;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _WfsIface_Get_result__isset {
  _WfsIface_Get_result__isset() : success(false) {}
  bool success :1;
} _WfsIface_Get_result__isset;

class WfsIface_Get_result {
 public:

  WfsIface_Get_result(const WfsIface_Get_result&);
  WfsIface_Get_result& operator=(const WfsIface_Get_result&);
  WfsIface_Get_result() noexcept {
  }

  virtual ~WfsIface_Get_result() noexcept;
  WfsData success;

  _WfsIface_Get_result__isset __isset;

  void __set_success(const WfsData& val);

  bool operator == (const WfsIface_Get_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const WfsIface_Get_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WfsIface_Get_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _WfsIface_Get_presult__isset {
  _WfsIface_Get_presult__isset() : success(false) {}
  bool success :1;
} _WfsIface_Get_presult__isset;

class WfsIface_Get_presult {
 public:


  virtual ~WfsIface_Get_presult() noexcept;
  WfsData* success;

  _WfsIface_Get_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _WfsIface_List_args__isset {
  _WfsIface_List_args__isset() : path(false) {}
  bool path :1;
} _WfsIface_List_args__isset;

class WfsIface_List_args {
 public:

  WfsIface_List_args(const WfsIface_List_args&);
  WfsIface_List_args& operator=(const WfsIface_List_args&);
  WfsIface_List_args() noexcept
                     : path() {
  }

  virtual ~WfsIface_List_args() noexcept;
  std::string path;

  _WfsIface_List_args__isset __isset;

  void __set_path(const std::string& val);

  bool operator == (const WfsIface_List_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    return true;
  }
  bool operator != (const WfsIface_List_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WfsIface_List_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class WfsIface_List_pargs {
 public:


  virtual ~WfsIface_List_pargs() noexcept;
  const std::string* path;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _WfsIface_List_result__isset {
  _WfsIface_List_result__isset() : success(false) {}
  bool success :1;
} _WfsIface_List_result__isset;

class WfsIface_List_result {
 public:

  WfsIface_List_result(const WfsIface_List_result&);
  WfsIface_List_result& operator=(const WfsIface_List_result&);
  WfsIface_List_result() noexcept {
  }

  virtual ~WfsIface_List_result() noexcept;
  DirList success;

  _WfsIface_List_result__isset __isset;

  void __set_success(const DirList& val);

  bool operator == (const WfsIface_List_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const WfsIface_List_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WfsIface_List_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _WfsIface_List_presult__isset {
  _WfsIface_List_presult__isset() : success(false) {}
  bool success :1;
} _WfsIface_List_presult__isset;

class WfsIface_List_presult {
 public:


  virtual ~WfsIface_List_presult() noexcept;
  DirList* success;

  _WfsIface_List_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class WfsIface_Ping_args {
 public:

  WfsIface_Ping_args(const WfsIface_Ping_args&) noexcept;
  WfsIface_Ping_args& operator=(const WfsIface_Ping_args&) noexcept;
  WfsIface_Ping_args() noexcept {
  }

  virtual ~WfsIface_Ping_args() noexcept;

  bool operator == (const WfsIface_Ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const WfsIface_Ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WfsIface_Ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class WfsIface_Ping_pargs {
 public:


  virtual ~WfsIface_Ping_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _WfsIface_Ping_result__isset {
  _WfsIface_Ping_result__isset() : success(false) {}
  bool success :1;
} _WfsIface_Ping_result__isset;

class WfsIface_Ping_result {
 public:

  WfsIface_Ping_result(const WfsIface_Ping_result&) noexcept;
  WfsIface_Ping_result& operator=(const WfsIface_Ping_result&) noexcept;
  WfsIface_Ping_result() noexcept
                       : success(0) {
  }

  virtual ~WfsIface_Ping_result() noexcept;
  int8_t success;

  _WfsIface_Ping_result__isset __isset;

  void __set_success(const int8_t val);

  bool operator == (const WfsIface_Ping_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const WfsIface_Ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WfsIface_Ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _WfsIface_Ping_presult__isset {
  _WfsIface_Ping_presult__isset() : success(false) {}
  bool success :1;
} _WfsIface_Ping_presult__isset;

class WfsIface_Ping_presult {
 public:


  virtual ~WfsIface_Ping_presult() noexcept;
  int8_t* success;

  _WfsIface_Ping_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class WfsIfaceClient : virtual public WfsIfaceIf {
 public:
  WfsIfaceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  WfsIfaceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void Append(WfsAck& _return, const WfsFile& file) override;
  void send_Append(const WfsFile& file);
  void recv_Append(WfsAck& _return);
  void Delete(WfsAck& _return, const std::string& path) override;
  void send_Delete(const std::string& path);
  void recv_Delete(WfsAck& _return);
  void Rename(WfsAck& _return, const std::string& path, const std::string& newpath) override;
  void send_Rename(const std::string& path, const std::string& newpath);
  void recv_Rename(WfsAck& _return);
  void Auth(WfsAck& _return, const WfsAuth& wa) override;
  void send_Auth(const WfsAuth& wa);
  void recv_Auth(WfsAck& _return);
  void Get(WfsData& _return, const std::string& path) override;
  void send_Get(const std::string& path);
  void recv_Get(WfsData& _return);
  void List(DirList& _return, const std::string& path) override;
  void send_List(const std::string& path);
  void recv_List(DirList& _return);
  int8_t Ping() override;
  void send_Ping();
  int8_t recv_Ping();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class WfsIfaceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<WfsIfaceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) override;
 private:
  typedef  void (WfsIfaceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_Append(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Delete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Rename(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Auth(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Get(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_List(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  WfsIfaceProcessor(::std::shared_ptr<WfsIfaceIf> iface) :
    iface_(iface) {
    processMap_["Append"] = &WfsIfaceProcessor::process_Append;
    processMap_["Delete"] = &WfsIfaceProcessor::process_Delete;
    processMap_["Rename"] = &WfsIfaceProcessor::process_Rename;
    processMap_["Auth"] = &WfsIfaceProcessor::process_Auth;
    processMap_["Get"] = &WfsIfaceProcessor::process_Get;
    processMap_["List"] = &WfsIfaceProcessor::process_List;
    processMap_["Ping"] = &WfsIfaceProcessor::process_Ping;
  }

  virtual ~WfsIfaceProcessor() {}
};

class WfsIfaceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  WfsIfaceProcessorFactory(const ::std::shared_ptr< WfsIfaceIfFactory >& handlerFactory) noexcept :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) override;

 protected:
  ::std::shared_ptr< WfsIfaceIfFactory > handlerFactory_;
};

class WfsIfaceMultiface : virtual public WfsIfaceIf {
 public:
  WfsIfaceMultiface(std::vector<std::shared_ptr<WfsIfaceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~WfsIfaceMultiface() {}
 protected:
  std::vector<std::shared_ptr<WfsIfaceIf> > ifaces_;
  WfsIfaceMultiface() {}
  void add(::std::shared_ptr<WfsIfaceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void Append(WfsAck& _return, const WfsFile& file) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Append(_return, file);
    }
    ifaces_[i]->Append(_return, file);
    return;
  }

  void Delete(WfsAck& _return, const std::string& path) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Delete(_return, path);
    }
    ifaces_[i]->Delete(_return, path);
    return;
  }

  void Rename(WfsAck& _return, const std::string& path, const std::string& newpath) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Rename(_return, path, newpath);
    }
    ifaces_[i]->Rename(_return, path, newpath);
    return;
  }

  void Auth(WfsAck& _return, const WfsAuth& wa) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Auth(_return, wa);
    }
    ifaces_[i]->Auth(_return, wa);
    return;
  }

  void Get(WfsData& _return, const std::string& path) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Get(_return, path);
    }
    ifaces_[i]->Get(_return, path);
    return;
  }

  void List(DirList& _return, const std::string& path) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->List(_return, path);
    }
    ifaces_[i]->List(_return, path);
    return;
  }

  int8_t Ping() override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Ping();
    }
    return ifaces_[i]->Ping();
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class WfsIfaceConcurrentClient : virtual public WfsIfaceIf {
 public:
  WfsIfaceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  WfsIfaceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void Append(WfsAck& _return, const WfsFile& file) override;
  int32_t send_Append(const WfsFile& file);
  void recv_Append(WfsAck& _return, const int32_t seqid);
  void Delete(WfsAck& _return, const std::string& path) override;
  int32_t send_Delete(const std::string& path);
  void recv_Delete(WfsAck& _return, const int32_t seqid);
  void Rename(WfsAck& _return, const std::string& path, const std::string& newpath) override;
  int32_t send_Rename(const std::string& path, const std::string& newpath);
  void recv_Rename(WfsAck& _return, const int32_t seqid);
  void Auth(WfsAck& _return, const WfsAuth& wa) override;
  int32_t send_Auth(const WfsAuth& wa);
  void recv_Auth(WfsAck& _return, const int32_t seqid);
  void Get(WfsData& _return, const std::string& path) override;
  int32_t send_Get(const std::string& path);
  void recv_Get(WfsData& _return, const int32_t seqid);
  void List(DirList& _return, const std::string& path) override;
  int32_t send_List(const std::string& path);
  void recv_List(DirList& _return, const int32_t seqid);
  int8_t Ping() override;
  int32_t send_Ping();
  int8_t recv_Ping(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
