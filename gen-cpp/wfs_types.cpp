/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "wfs_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>




WfsError::~WfsError() noexcept {
}


void WfsError::__set_code(const int32_t val) {
  this->code = val;
__isset.code = true;
}

void WfsError::__set_info(const std::string& val) {
  this->info = val;
__isset.info = true;
}
std::ostream& operator<<(std::ostream& out, const WfsError& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t WfsError::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->code);
          this->__isset.code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->info);
          this->__isset.info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WfsError::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WfsError");

  if (this->__isset.code) {
    xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->code);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.info) {
    xfer += oprot->writeFieldBegin("info", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->info);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WfsError &a, WfsError &b) {
  using ::std::swap;
  swap(a.code, b.code);
  swap(a.info, b.info);
  swap(a.__isset, b.__isset);
}

WfsError::WfsError(const WfsError& other0) {
  code = other0.code;
  info = other0.info;
  __isset = other0.__isset;
}
WfsError& WfsError::operator=(const WfsError& other1) {
  code = other1.code;
  info = other1.info;
  __isset = other1.__isset;
  return *this;
}
void WfsError::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WfsError(";
  out << "code="; (__isset.code ? (out << to_string(code)) : (out << "<null>"));
  out << ", " << "info="; (__isset.info ? (out << to_string(info)) : (out << "<null>"));
  out << ")";
}


WfsAck::~WfsAck() noexcept {
}


void WfsAck::__set_ok(const bool val) {
  this->ok = val;
}

void WfsAck::__set_error(const WfsError& val) {
  this->error = val;
__isset.error = true;
}
std::ostream& operator<<(std::ostream& out, const WfsAck& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t WfsAck::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_ok = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->ok);
          isset_ok = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->error.read(iprot);
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_ok)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t WfsAck::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WfsAck");

  xfer += oprot->writeFieldBegin("ok", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->ok);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.error) {
    xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->error.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WfsAck &a, WfsAck &b) {
  using ::std::swap;
  swap(a.ok, b.ok);
  swap(a.error, b.error);
  swap(a.__isset, b.__isset);
}

WfsAck::WfsAck(const WfsAck& other2) {
  ok = other2.ok;
  error = other2.error;
  __isset = other2.__isset;
}
WfsAck& WfsAck::operator=(const WfsAck& other3) {
  ok = other3.ok;
  error = other3.error;
  __isset = other3.__isset;
  return *this;
}
void WfsAck::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WfsAck(";
  out << "ok=" << to_string(ok);
  out << ", " << "error="; (__isset.error ? (out << to_string(error)) : (out << "<null>"));
  out << ")";
}


WfsReq::~WfsReq() noexcept {
}


void WfsReq::__set_path(const std::string& val) {
  this->path = val;
__isset.path = true;
}
std::ostream& operator<<(std::ostream& out, const WfsReq& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t WfsReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->path);
          this->__isset.path = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WfsReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WfsReq");

  if (this->__isset.path) {
    xfer += oprot->writeFieldBegin("path", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->path);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WfsReq &a, WfsReq &b) {
  using ::std::swap;
  swap(a.path, b.path);
  swap(a.__isset, b.__isset);
}

WfsReq::WfsReq(const WfsReq& other4) {
  path = other4.path;
  __isset = other4.__isset;
}
WfsReq& WfsReq::operator=(const WfsReq& other5) {
  path = other5.path;
  __isset = other5.__isset;
  return *this;
}
void WfsReq::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WfsReq(";
  out << "path="; (__isset.path ? (out << to_string(path)) : (out << "<null>"));
  out << ")";
}


WfsAuth::~WfsAuth() noexcept {
}


void WfsAuth::__set_name(const std::string& val) {
  this->name = val;
__isset.name = true;
}

void WfsAuth::__set_pwd(const std::string& val) {
  this->pwd = val;
__isset.pwd = true;
}
std::ostream& operator<<(std::ostream& out, const WfsAuth& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t WfsAuth::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->pwd);
          this->__isset.pwd = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WfsAuth::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WfsAuth");

  if (this->__isset.name) {
    xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->name);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.pwd) {
    xfer += oprot->writeFieldBegin("pwd", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->pwd);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WfsAuth &a, WfsAuth &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.pwd, b.pwd);
  swap(a.__isset, b.__isset);
}

WfsAuth::WfsAuth(const WfsAuth& other6) {
  name = other6.name;
  pwd = other6.pwd;
  __isset = other6.__isset;
}
WfsAuth& WfsAuth::operator=(const WfsAuth& other7) {
  name = other7.name;
  pwd = other7.pwd;
  __isset = other7.__isset;
  return *this;
}
void WfsAuth::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WfsAuth(";
  out << "name="; (__isset.name ? (out << to_string(name)) : (out << "<null>"));
  out << ", " << "pwd="; (__isset.pwd ? (out << to_string(pwd)) : (out << "<null>"));
  out << ")";
}


WfsData::~WfsData() noexcept {
}


void WfsData::__set_data(const std::string& val) {
  this->data = val;
__isset.data = true;
}
std::ostream& operator<<(std::ostream& out, const WfsData& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t WfsData::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->data);
          this->__isset.data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WfsData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WfsData");

  if (this->__isset.data) {
    xfer += oprot->writeFieldBegin("data", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeBinary(this->data);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WfsData &a, WfsData &b) {
  using ::std::swap;
  swap(a.data, b.data);
  swap(a.__isset, b.__isset);
}

WfsData::WfsData(const WfsData& other8) {
  data = other8.data;
  __isset = other8.__isset;
}
WfsData& WfsData::operator=(const WfsData& other9) {
  data = other9.data;
  __isset = other9.__isset;
  return *this;
}
void WfsData::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WfsData(";
  out << "data="; (__isset.data ? (out << to_string(data)) : (out << "<null>"));
  out << ")";
}


WfsFile::~WfsFile() noexcept {
}


void WfsFile::__set_data(const std::string& val) {
  this->data = val;
}

void WfsFile::__set_name(const std::string& val) {
  this->name = val;
}

void WfsFile::__set_compress(const int8_t val) {
  this->compress = val;
__isset.compress = true;
}
std::ostream& operator<<(std::ostream& out, const WfsFile& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t WfsFile::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_data = false;
  bool isset_name = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->data);
          isset_data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          isset_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->compress);
          this->__isset.compress = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_data)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t WfsFile::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WfsFile");

  xfer += oprot->writeFieldBegin("data", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeBinary(this->data);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.compress) {
    xfer += oprot->writeFieldBegin("compress", ::apache::thrift::protocol::T_BYTE, 3);
    xfer += oprot->writeByte(this->compress);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WfsFile &a, WfsFile &b) {
  using ::std::swap;
  swap(a.data, b.data);
  swap(a.name, b.name);
  swap(a.compress, b.compress);
  swap(a.__isset, b.__isset);
}

WfsFile::WfsFile(const WfsFile& other10) {
  data = other10.data;
  name = other10.name;
  compress = other10.compress;
  __isset = other10.__isset;
}
WfsFile& WfsFile::operator=(const WfsFile& other11) {
  data = other11.data;
  name = other11.name;
  compress = other11.compress;
  __isset = other11.__isset;
  return *this;
}
void WfsFile::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WfsFile(";
  out << "data=" << to_string(data);
  out << ", " << "name=" << to_string(name);
  out << ", " << "compress="; (__isset.compress ? (out << to_string(compress)) : (out << "<null>"));
  out << ")";
}


DirItem::~DirItem() noexcept {
}


void DirItem::__set_name(const std::string& val) {
  this->name = val;
}

void DirItem::__set_size(const int64_t val) {
  this->size = val;
}

void DirItem::__set_mtime(const int64_t val) {
  this->mtime = val;
}

void DirItem::__set_isDir(const bool val) {
  this->isDir = val;
}
std::ostream& operator<<(std::ostream& out, const DirItem& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t DirItem::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_name = false;
  bool isset_size = false;
  bool isset_mtime = false;
  bool isset_isDir = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          isset_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->size);
          isset_size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->mtime);
          isset_mtime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isDir);
          isset_isDir = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_size)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_mtime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_isDir)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t DirItem::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DirItem");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("size", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->size);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mtime", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->mtime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("isDir", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->isDir);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DirItem &a, DirItem &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.size, b.size);
  swap(a.mtime, b.mtime);
  swap(a.isDir, b.isDir);
}

DirItem::DirItem(const DirItem& other12) {
  name = other12.name;
  size = other12.size;
  mtime = other12.mtime;
  isDir = other12.isDir;
}
DirItem& DirItem::operator=(const DirItem& other13) {
  name = other13.name;
  size = other13.size;
  mtime = other13.mtime;
  isDir = other13.isDir;
  return *this;
}
void DirItem::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DirItem(";
  out << "name=" << to_string(name);
  out << ", " << "size=" << to_string(size);
  out << ", " << "mtime=" << to_string(mtime);
  out << ", " << "isDir=" << to_string(isDir);
  out << ")";
}


DirList::~DirList() noexcept {
}


void DirList::__set_path(const std::string& val) {
  this->path = val;
}

void DirList::__set_items(const std::vector<DirItem> & val) {
  this->items = val;
__isset.items = true;
}

void DirList::__set_error(const WfsError& val) {
  this->error = val;
__isset.error = true;
}
std::ostream& operator<<(std::ostream& out, const DirList& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t DirList::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_path = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->path);
          isset_path = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->items.clear();
            uint32_t _size14;
            ::apache::thrift::protocol::TType _etype17;
            xfer += iprot->readListBegin(_etype17, _size14);
            this->items.resize(_size14);
            uint32_t _i18;
            for (_i18 = 0; _i18 < _size14; ++_i18)
            {
              xfer += this->items[_i18].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.items = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->error.read(iprot);
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_path)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t DirList::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DirList");

  xfer += oprot->writeFieldBegin("path", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->path);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.items) {
    xfer += oprot->writeFieldBegin("items", ::apache::thrift::protocol::T_LIST, 2);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->items.size()));
      std::vector<DirItem> ::const_iterator _iter19;
      for (_iter19 = this->items.begin(); _iter19 != this->items.end(); ++_iter19)
      {
        xfer += (*_iter19).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.error) {
    xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->error.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DirList &a, DirList &b) {
  using ::std::swap;
  swap(a.path, b.path);
  swap(a.items, b.items);
  swap(a.error, b.error);
  swap(a.__isset, b.__isset);
}

DirList::DirList(const DirList& other20) {
  path = other20.path;
  items = other20.items;
  error = other20.error;
  __isset = other20.__isset;
}
DirList& DirList::operator=(const DirList& other21) {
  path = other21.path;
  items = other21.items;
  error = other21.error;
  __isset = other21.__isset;
  return *this;
}
void DirList::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DirList(";
  out << "path=" << to_string(path);
  out << ", " << "items="; (__isset.items ? (out << to_string(items)) : (out << "<null>"));
  out << ", " << "error="; (__isset.error ? (out << to_string(error)) : (out << "<null>"));
  out << ")";
}


